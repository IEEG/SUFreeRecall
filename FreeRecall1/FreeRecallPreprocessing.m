% Run this script first to read clustered spike data from the free recall
% experiment and produce the xllog array, which contains properties of
% individual units, and is used by subsequent scripts.
% N.B. You need to modify line 390 on openNSx in order to get this to work
% on Unix-based OS.
% Change the home directory before use. This should be the directory under
% which all of the subjects's subdirectories are located.
% Uncomment the section "save the image" in order to produce rasters for
% each unit. Create a subdirectory under home called "ImgsFreeRecall", or
% change the code as appropriate.
% Additionally, the structure RecallSpikes was generated by hand from data
% collected from the Recal
% Runtime: 38 min on authors' hardware, without saving figures.

% Copyright Simon Khuvis, 2019. See github.com/IEEG for licensing and use
% information.

t = cputime;

Home = '/Users/simonkhuvis/Documents/MATLAB/SingleUnits';
subjectList = {'S3/FreeRecall',...
    'S2/FreeRecall/FreeRecall1',...
    'S2/FreeRecall/FreeRecall2',...
    'S2/FreeRecall/FreeRecall3',...
    'S6/FreeRecall',...
    'S8/FreeRecall'};
[b,a] = butter(2,[300 3000]/15000);
for recIt = 6:-1:1
    RecallSpikes(recIt).Face.spikes = {[]};
    RecallSpikes(recIt).Place.spikes = {[]};
end
%% Adjust this based on visual localizer numbers.

noUnits = 1; % All suspected Units;
noVisSel = 1; % Visually-selective units
xllog = [];
%%
for subNo = 1:6
    for runno = 1:3
        clearvars -except xllog RecallSpikes Home subjectList noUnits noVisSel subNo runno b a t
        chanID = 0; % For keeping track of which channel is loaded.
        while true
            cd(Home);
            cd(subjectList{subNo}); % Navigate to Subject Directory

            pt = strsplit(subjectList{subNo},'/'); pt = pt{1};

            fls = what();
            batchfile = fls.mat{cell2mat(regexp(fls.mat,['Batch\d*'  pt  '.mat']))};
            if isempty(batchfile)
                disp(['Missing Batch File: ' pt]);
            end
            batchNo = batchfile(6);

            exper = ['FreeRecall' num2str(batchNo)];
            subject = ['Subject ' num2str(subNo)];

            load(['./' batchfile])

            alpha = .05; % Significance cutoff

            whichexp = cellfun(@length,regexp(fileList,[exper '\.[-\w]+\.ns6']))==1;
            if sum(whichexp) ~= 1
                error(['Too few/many files with given name in ' batchfile '.']);
            end

            startInds = cumsum(transitions)+1;
            startInd = startInds(whichexp); endInd = startInds(find(whichexp)+1)-1;

            % For unit spreadsheet:
            class = 0;
            burst = false;
            
            % Load recall information:
            
            if(exist('RecallInfo.mat','file'))
                load('RecallInfo.mat');
            end

        %%

            if exist('unit','var')
                unit = unit + 1;
            else
                unit = 1;
            end

            if ~exist('chanNo','var')
                chanNo = 1;
            end
            
            if ~exist(['./' exper '.stimon' num2str(runno) '.mat'],'file') || ...
                ~exist(['./' exper '.codes' num2str(runno) '.mat'],'file')
                break
            end

            if ~exist(['stimon' num2str(runno)],'var')
                load(['./' exper '.stimon' num2str(runno) '.mat'])
            end

            if ~exist(['codes' num2str(runno)],'var')
                load(['./' exper '.codes' num2str(runno) '.mat'])
            end

            clf
            ref = h5read(['chan' num2str(chanNo) '/sort_neg_simple/sort_cat.h5'],'/groups');
            if(all(ref(2,:)<unit))
                chanNo = chanNo+1;
                if chanNo > chans
                    break;
                end
                unit = 1;

                while ~exist(['chan' num2str(chanNo)],'dir') && chanNo <= chans
                    chanNo = chanNo + 1;
                end

                if chanNo > chans
                    break;
                end

                ref = h5read(['chan' num2str(chanNo) '/sort_neg_simple/sort_cat.h5'],'/groups');
            end
            refhold = zeros(1,max(ref(1,:))+1);
            refhold(ref(1,:)+1)=ref(2,:);
            ref = refhold;

            loc = loc{(chanNo > 8) + 1};

            spikesPre = h5read(['chan' num2str(chanNo) '/data_chan' num2str(chanNo) '.h5'],'/neg/times').'*30;

            classhold = zeros(size(spikesPre));
            index = h5read(['chan' num2str(chanNo) '/sort_neg_simple/sort_cat.h5'],'/index')+1;
            classes = h5read(['chan' num2str(chanNo) '/sort_neg_simple/sort_cat.h5'],'/classes');
            classes = ref(classes+1);
            classhold(index) = classes;
            classes = classhold;

            spikesPre = spikesPre(classes==unit);
            
            % Sometimes there is a run with spikes and a run with no spikes
            spikes = spikesPre((spikesPre>=startInd)&(spikesPre<=endInd)) - startInd + 1;
            if isempty(spikes) && ~((subNo==5)&&(chanNo==8)&&(unit==2)) && ~((subNo==6)&&(chanNo==3)&&(unit==3))
                disp(['No spikes: channel ' num2str(chanNo) ', unit ' num2str(unit) '.'])
                continue;
            end

            numcode = strncmpi('Face',codes,4);
            subplot(11,3,[1 23])

            % Order in which trials are displayed.
            ord = [unique(codes(strncmp(codes,'face',4)));unique(codes(~strncmp(codes,'face',4)))];
            %% Plot the spike raster
            hold on
            set(gca,'YDir','reverse')
            rowNo = 0;
            runOrd = zeros(size(stimon));
            rastcode = zeros(size(numcode));
            stimCount = zeros(size(ord));

            cats = cellfun(@(x) [upper(x(1)) x(2:end)], unique(cellfun(@(x) x(isstrprop(x,'alpha')), codes,'Uni',0),'stable'),'Uni',0);
            colorcode = zeros(2,3);
            colorcode(strcmpi(cats,'face'),:) = [255 0 0]/256;
            colorcode(~strcmpi(cats,'face'),:) = [0 0 255]/256;

            for stimIt = 1:length(ord)
                stimID = find(strcmp(codes,ord{stimIt}));
                if(stimIt<length(stimCount))
                    stimCount(stimIt+1) = length(stimID)+stimCount(stimIt);
                end
                stimCount(stimIt) = length(stimID)/2+stimCount(stimIt);
                raststor(stimIt) = struct('id',{100*(~strncmpi(ord{stimIt},'Face',4)+1.0) + ...
                    str2double(ord{stimIt}(end-2:end-1))},'sig',{cell(length(stimID),1)});
                for instIt = 1:length(stimID)
                    rowNo = rowNo + 1; % Which row to plot on the raster
                    runNo = stimID(instIt); % Which run number
                    runOrd(rowNo) = runNo; % Keep track of which trial
                    rast = (spikes((spikes>(stimon(runNo)-1.5e4)) & (spikes<(stimon(runNo)+6.75e4)))-...
                        stimon(runNo))/3e4;
                    raststor(stimIt).sig{instIt} = rast;

                    if ~isempty(rast) 
                        plot([1;1]*rast,[rowNo-.85 rowNo-.15],'Color',...
                            colorcode(strncmpi(ord{stimIt},cats,4),:),'LineWidth',3)
                    end
                    rastcode(rowNo) = find(strncmpi(ord{stimIt},cats,4),1);
                end
            end
            plot([0 0],[0 length(stimon)],'k--')
            plot([1.5174 1.5174],[0 length(stimon)],'k--')
            axis([-.5 2.25 0 length(stimon)])
            set(gca,'YTick',stimCount)
            set(gca,'YTickLabel',ord)
            title([subject ': ' exper ', Channel ' num2str(chanNo) ' (' loc '), Unit ' num2str(unit)])
            ylabel('Stimulus')

            %% Peri-stimulus time histograms
            addme = -1.5e4:0.1e4:6.75e4;

            intervals = bsxfun(@plus,repmat(stimon,length(addme),1),addme.');
            spikecount = @(val) sum(spikes<=val);
            map = diff(arrayfun(spikecount,intervals)).';
            
            timecourse = {{30*map(numcode,:);30*map(~numcode,:)}};

            ftcourse = subplot(11,3,[25 26]);
            bar((addme(2:end)-(addme(2)-addme(1))/2)/3e4,30*sum(map(numcode,:))/(sum(numcode)),1,...
                'EdgeColor','none','FaceColor','r')
            xlim([addme(1) addme(end)]/3e4)
            hold on
            ylabel('Firing Rate [Hz]')

            otcourse = subplot(11,3,[28 29]);
            bar((addme(2:end)-(addme(2)-addme(1))/2)/3e4,30*sum(map(~numcode,:))/(sum(~numcode)),1,...
                'EdgeColor','none','FaceColor','b')
            xlim([addme(1) addme(end)]/3e4)
            hold on
            xlabel('Time [s]')

            yzoom = zeros(2,2);
            yzoom(1,:) = get(ftcourse,'YLim');
            yzoom(2,:) = get(otcourse,'YLim');

            subplot(11,3,[25 26])
            ylim([0 max(yzoom(:,2))]);
            plot([0 0],[0 max(yzoom(:,2))],'k--')
            plot([1.5174 1.5174],[0 max(yzoom(:,2))],'k--')

            subplot(11,3,[28 29])
            ylim([0 max(yzoom(:,2))])
            plot([0 0],[0 max(yzoom(:,2))],'k--')
            plot([1.5174 1.5174],[0 max(yzoom(:,2))],'k--')
            %% Is it an ON or OFF cell?

            subplot(11,3,[1 23])

            onmap = downsample(diff(...
                arrayfun(spikecount,reshape([stimon+0.3e4;stimon+1.5e4],1,2*length(stimon)))),2).';

            offmap = downsample(diff(...
                arrayfun(spikecount,reshape([stimon+1.61*3e4;stimon+2.01*3e4],1,2*length(stimon)))),2).';

            premap = downsample(diff(...
                arrayfun(spikecount,reshape([stimon-1.2e4;stimon],1,2*length(stimon)))),2).';

            if (max(sum(offmap>0),sum(onmap>0)) < 8) && ~((subNo==5)&&(chanNo==8)&&(unit==2)) && ~((subNo==6)&&(chanNo==3)&&(unit==3))
                disp(['Insufficient spikes: channel ' num2str(chanNo) ', unit ' num2str(unit) '.'])
                continue;
            end

            friedInp = [30*diff([zeros(sum(numcode),1) cell2mat(arrayfun(@(x) sum(map(numcode,13:x),2),[18 24 30 63 69 75 80],'Uni',0))],1,2)./repmat(diff([12 18 24 30 63 69 75 80]),sum(numcode),1);...)
                30*diff([zeros(sum(~numcode),1) cell2mat(arrayfun(@(x) sum(map(~numcode,13:x),2),[18 24 30 63 69 75 80],'Uni',0))],1,2)./repmat(diff([12 18 24 30 63 69 75 80]),sum(~numcode),1)];
            
            pOn = min([friedman(friedInp(1:sum(numcode),1:4),1,'off') ...
                friedman(friedInp(sum(numcode)+1:end,1:4),1,'off')]);
            
            indx = @(vec,ind) vec(ind);
            facesel = 2^.5*norminv(sum(indx(tiedrank(onmap),numcode))/(sum(numcode)*sum(~numcode))-...
                (1+sum(numcode))/(2*sum(~numcode)),0,1);
            
            if (pOn < .0125) % Is it an ON cell?
                fill([.1 .5 .5 .1],[0 0 length(stimon)*[1 1]],[.92 .92 .92],'EdgeColor','None');
                set(gca,'children',flipud(get(gca,'children')))
                ti = 'Firing Rate, 100 to 500 ms Post-Stimulus';
                tt = 'ON Type ';
                instmap = onmap;
                oncell = true;
                responsiveness = norminv(pOn,0,1);

                class = 1;
                p = ranksum(onmap(numcode),onmap(~numcode));
                [pAmp,~,statAmp] = kruskalwallis(abs(log((onmap+.1)./(premap+.1))),cellfun(@(x) x(isstrprop(x,'alpha')), codes,'Uni',0),'off');
            else
                fill([.1 .5 .5 .1],[0 0 length(stimon)*[1 1]],[.92 .92 .92],'EdgeColor','None');
                set(gca,'children',flipud(get(gca,'children')))
                ti = 'Firing Rate, 100 to 500 ms Post-Stimulus';
                tt = 'Non-Responsive or Artifactual';
                instmap = onmap;
                oncell = true;
                responsiveness = norminv(pOn,0,1);

                class = 0;
                catsel = 0;
            end

            supersig = false;
            if class % If it's visually responsive...

                if p < alpha/2/noVisSel %Check if it's category-selective
                    gsigtan = [facesel<0 facesel>0];

                    if any(gsigtan)
                        tt = [tt cats{gsigtan~=0} '-Selective'];
                        class = 3;
                        catsel = find(gsigtan);
                        supersig = p<.001.*[facesel<0 facesel>0];
                    end
                else
                    tt = [tt ' Visually-Responsive Unclassified'];
                    class = 1;
                    catsel = 0;
                end
            end
            %% Plot the average spike frequency per trial.

            axinst = subplot(11,3,[3 24]);
            instlim = max(3*instmap/(1.2))+1;
            presno = (1:size(instmap,1))-.5;
            for classIt = 1:2
                barh(presno(rastcode==classIt),3*instmap(runOrd(rastcode==classIt))/(1.2),1,...
                    'facecolor',colorcode(classIt,:),'EdgeColor','none','BaseValue',-.05*instlim);
                hold on
            end
            set(gca,'Ydir','reverse')
            set(gca,'YTick',stimCount)
            set(gca,'YTickLabel',ord)
            ylim([0 size(instmap,1)])
            xlim(instlim*[-.05 1.1])
            title(ti)

            %% Calculate the response latency

            if class>0
                if catsel == 2
                    catofint = 'Place';
                else
                    catofint = 'Face';
                end
                profile = abs(diff(mean(map(strcmp(cellfun(@(x) x(isstrprop(x,'alpha')),...
                    codes,'Uni',0),catofint),:))));
                bl = (mean(profile(15*(~oncell)+(1:14)).^2)*chi2inv(.5,1)).^.5;
                [cond,latency] = max(profile(15*(~oncell)+(17:28)));
            else
                latency = NaN;
            end

            latency = latency + 2;
            %%

            instlim = max(3*instmap/(1.2))+1;

            if catsel
                plotcat = catsel;
            else
                plotcat = find(strncmp('Face',cats,4),1);
            end

            axbox = subplot(11,3,[27 30]);
            hold on
            niceax = get(axinst,'Position');
            oldax = get(axbox,'Position');
            boxplot(axbox,instmap,strncmpi(codes,cats{plotcat},4)+1,'orientation','horizontal','colors',[0 0 1;colorcode(plotcat,:)],'symbol','+')
            set(axbox,'Position',[niceax(1) oldax(2) niceax(3) oldax(4)]);

            scale = max(instmap);

            if supersig
                plot([1.4 1.6]*scale,[1.5 1.5],'k*','MarkerSize',10,'LineWidth',1)
                alphahold = .001;
                plot([(max(instmap(strncmpi(codes,cats{plotcat},4))) + .2*scale) 1.5*scale*[1 1]],[2 2 1.8],'k','LineWidth',1)
                plot([(max(instmap(~strncmpi(codes,cats{plotcat},4))) + .2*scale) 1.5*scale*[1 1]],[1 1 1.2],'k','LineWidth',1)
                sigcrit = 'p<.001';
            elseif(class == 3) 
                plot(1.5*scale,1.5,'k*','MarkerSize',10,'LineWidth',1)
                plot([(max(instmap(strncmpi(codes,cats{plotcat},4))) + .2*scale) 1.5*scale*[1 1]],[2 2 1.8],'k','LineWidth',1)
                plot([(max(instmap(~strncmpi(codes,cats{plotcat},4))) + .2*scale) 1.5*scale*[1 1]],[1 1 1.2],'k','LineWidth',1)
                sigcrit = 'p<.05';
            else
                sigcrit = 'n.s.';
            end
            text(1.1*instlim,.5,sigcrit,...
            'HorizontalAlignment','right','VerticalAlignment','bottom','Interpreter','tex')

            xlim(instlim*[-.05 1.1])
            xlabel('Unit Firing Rate [Hz]')
            set(gca,'YTick',[1 2])
            set(gca,'YTickLabel',{'Other',cats{plotcat}})

            %% Plot the ISI and spike waveform
            isi1 = diff(spikes((spikes>=stimon(1)-1.5e4)&(spikes<=stimon(end)+3e4))/30);
            xinds1 = linspace((min(isi1)-.1),prctile(isi1,90),30);
            subplot(11,3,[31 32])
            bar(xinds1+(xinds1(2)-xinds1(1))/2,histc(isi1,xinds1),1,'k')
            xlabel('Time [ms]')
            ylabel('Count [Spikes]')
            title('Inter-Spike Interval')
            xlim([min(xinds1) max(xinds1)])

            if chanID ~= chanNo
                openNSx(['/' fileList{whichexp}],'read',['c:' num2str(chanNo)])
                d = filtfilt(b,a,double(NS6.Data));
                chanID = chanNo;
            end

            subplot(11,3,33)

            smooth = d(bsxfun(@plus,round(spikes((spikes>=stimon(1)-1.5e4)&(spikes<=stimon(end)+3e4))'),-30:60));

            plot((-30:60)/30,smooth','Color',[.6 .6 .6])
            hold on
            plot((-30:60)/30,mean(smooth),'Color','k')
            title('Mean Spike Waveform')
            xlabel('Time [ms]')
            ylabel('Potential [\muV]')
            axis([-1 2 prctile(min(smooth,[],2),20) prctile(max(smooth,[],2),80)])
            %%
            % Calculate the log ISI:
            isi = log10(diff(spikes((spikes>=stimon(1)-1.5e4)&(spikes<=stimon(end)+3e4))/30));
            xinds = (min(isi)-.1):.1:prctile(isi,98);
            isiH = conv(histc(isi,xinds),[.2 .2 .2 .2 .2],'same');
            % Correct for edge effects.
            isiH(1:2) = isiH(1:2).*[5/3 5/4]; isiH(end-1:end) = isiH(end-1:end).*[5/4 5/3];

            [ypk,xpk] = findpeaks(isiH,'MinPeakDistance',2);
            if (length(xpk)<2) || (~any(xinds(xpk)<2))
                burst = false;
            else
                for xIt = (length(xpk)-1)
                    gmin = min(isiH(xpk(xIt):xpk(xIt+1)));
                    voidVar = 1-gmin/prod(ypk(xIt:xIt+1));
                    if voidVar>.7
                        burst = true;
                    end
                end
            end
            %% Log the data
            cats = ['None';cats]; %#ok<AGROW>
            codeNums = 100*cellfun(@(x) find(cellfun(@(y) all(strcmp(y,x(isletter(x)))),{'Face','Place'})), codes)...
                +cellfun(@(x) str2double(x(end-2:end))/10,codes);

            batchname = strsplit(batchfile,'.'); batchname = batchname{1};
            if ~exist('xllog','var')
                xllog = struct('pt',pt,'batchname',batchname,'loc',loc,'chanNo',chanNo,'unit',unit,'run',runno,'tt',tt,'oncell',oncell,...
                    'class',class,'catsel',cats{catsel+1},'burst',burst,'response',[codeNums onmap offmap premap],'VisResponsiveness',responsiveness,'latency',latency,...
                    'timecourse',timecourse,'dprime',facesel,'rast',raststor);
            else
                alreadyin = find(arrayfun(@(x) isequal(x.batchname,batchname) && (x.chanNo==chanNo) && (x.unit == unit),xllog),1,'last');
                
                if ~isempty(alreadyin)
                    if (xllog(alreadyin).run < runno)
                        burst = max(xllog(alreadyin).burst,burst);
                        response = [xllog(alreadyin).response; [codeNums onmap offmap premap]];
                        responsiveness = mean([xllog(alreadyin).VisResponsiveness responsiveness]);
                        latency = mean([xllog(alreadyin).latency latency]);
                        timecourse = {cellfun(@(x,y) [x;y],xllog(alreadyin).timecourse,timecourse{1},'Uni',0)};
                        facesel = mean([xllog(alreadyin).dprime facesel]);
                        if (xllog(alreadyin).class > class)
                            tt = xllog(alreadyin).tt; class = xllog(alreadyin).class;
                            catname = xllog(alreadyin).catsel;
                        else
                            catname = cats{catsel+1};
                        end
                    else
                        catname = cats{catsel+1};
                    end
                    xllog(alreadyin) = struct('pt',pt,'batchname',batchname,'loc',loc,'chanNo',chanNo,'unit',unit,'run',runno,'tt',tt,'oncell',oncell,...
                        'class',class,'catsel',catname,'burst',burst,'response',response,'VisResponsiveness',responsiveness,'latency',latency,...
                        'timecourse',timecourse,'dprime',facesel,'rast',[xllog(alreadyin).rast;raststor]);
                    unitInd = alreadyin - find(strcmp(arrayfun(@(x) x.batchname,xllog,'Uni',0),batchname),1) + 1;
                else
                    xllog = [xllog; struct('pt',pt,'batchname',batchname,'loc',loc,'chanNo',chanNo,'unit',unit,'run',runno,'tt',tt,'oncell',oncell,...
                        'class',class,'catsel',cats{catsel+1},'burst',burst,'response',[codeNums onmap offmap premap],'VisResponsiveness',responsiveness,'latency',latency,...
                        'timecourse',timecourse,'dprime',facesel,'rast',raststor)]; %#ok<AGROW>
                    unitInd = length(xllog) - find(strcmp(arrayfun(@(x) x.batchname,xllog,'Uni',0),batchname),1) + 1;
                end
            end
            
            recInd = 1;
            for recIt = 1:3
                if(exist(['FaceRec' num2str(recIt)],'var') && exist(['PlaceRec' num2str(recIt)],'var'))
                    FaceRec = eval(['FaceRec' num2str(recIt)]);
                    PlaceRec = eval(['PlaceRec' num2str(recIt)]);
                    RecallSpikes(subNo).Face.spikes{recInd,unitInd} = spikes((spikes>=FaceRec.start)&(spikes<=FaceRec.end)) - FaceRec.start + 1;
                    RecallSpikes(subNo).Place.spikes{recInd,unitInd} = spikes((spikes>=PlaceRec.start)&(spikes<=PlaceRec.end)) - PlaceRec.start + 1;
                    RecallSpikes(subNo).Face.events{recInd} = FaceRec.events;
                    RecallSpikes(subNo).Place.events{recInd} = PlaceRec.events;
                    RecallSpikes(subNo).Face.duration{recInd} = (FaceRec.end-FaceRec.start+1)/3e4;
                    RecallSpikes(subNo).Place.duration{recInd} = (PlaceRec.end-PlaceRec.start+1)/3e4;
                    recInd = recInd + 1;
                end
            end

            %% Save the image
%             cd([Home '/ImgsFreeRecall']);
% 
%             if class
%                 set(gcf,'PaperUnits','inches','PaperPosition',[0 0 1442 804]/100)
%                 print([pt exper 'Run' num2str(runno) '_Channel' num2str(chanNo) 'Unit' num2str(unit) '-' num2str(noUnits)],'-dpng','-r100')
%             end

            cd(Home);
        end
    end
end

FreeRecallTime = cputime-t;
disp(['Runtime: ' num2str(FreeRecallTime)])